# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

if not "SM" in globals():
	SM = Extension

projectName = 'dhooks'

project = SM.HL2Project(builder, projectName + '.ext')
project.sources += [
  'extension.cpp',
  'listeners.cpp',
  'natives.cpp',
  'signatures.cpp',
  'vhook.cpp',
  'util.cpp',
  'dynhooks_sourcepawn.cpp',
#  os.path.join('DynamicHooks', 'asm.cpp'),
  os.path.join('DynamicHooks', 'hook.cpp'),
  os.path.join('DynamicHooks', 'manager.cpp'),
  os.path.join('DynamicHooks', 'registers.cpp'),
  os.path.join('DynamicHooks', 'utilities.cpp'),
  os.path.join('DynamicHooks', 'conventions', 'x86MsCdecl.cpp'),
  os.path.join('DynamicHooks', 'conventions', 'x86MsStdcall.cpp'),
  os.path.join('DynamicHooks', 'conventions', 'x86MsFastcall.cpp'),
  os.path.join(Extension.sm_root, 'extensions', 'sm-ext-common', 'mathstubs.c'),
  os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp'),
  os.path.join(Extension.sm_root, 'public', 'CDetour', 'detours.cpp'),
  os.path.join(Extension.sm_root, 'public', 'asm', 'asm.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'decode.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'itab.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn-att.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn-intel.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'udis86.c'),
]
project.compiler.defines += ['HAVE_STRING_H'];

if builder.target_platform == 'windows':
	project.sources += [os.path.join('DynamicHooks', 'conventions', 'x86MsThiscall.cpp')]
else:
	project.sources += [os.path.join('DynamicHooks', 'conventions', 'x86GccThiscall.cpp')]

if os.path.isfile(os.path.join(SM.sm_root, 'sourcepawn', 'vm', 'x86', 'assembler-x86.cpp')):
  project.sources += [os.path.join(SM.sm_root, 'sourcepawn', 'vm', 'x86', 'assembler-x86.cpp'),]
elif os.path.isfile(os.path.join(SM.sm_root, 'public', 'jit', 'x86', 'assembler-x86.cpp')):
  project.sources += [os.path.join(SM.sm_root, 'public', 'jit', 'x86', 'assembler-x86.cpp'),]
else:
  raise Exception('Could not find assembler-x86.cpp.  Did you checkout SourceMod\'s submodules?')

for sdk_name in SM.sdks:
  sdk = SM.sdks[sdk_name]

  binary = SM.HL2Config(project, projectName + '.ext', sdk)

SM.extensions += builder.Add(project)
